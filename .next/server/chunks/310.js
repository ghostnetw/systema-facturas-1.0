"use strict";exports.id=310,exports.ids=[310],exports.modules={95310:(e,t,r)=>{r.d(t,{rc:()=>eb,ZD:()=>eR,UC:()=>ej,VY:()=>eN,hJ:()=>eD,ZL:()=>ex,bL:()=>ey,hE:()=>ew,l9:()=>eh});var o=r(43210),n=r(11273),a=r(98599),i=r(70569),s=r(96963),l=r(65551),d=r(31355),u=r(32547),c=r(25028),p=r(46059),f=r(14163),g=r(1359),m=r(42247),v=r(63376),y=r(8730),h=r(60687),x="Dialog",[D,j]=(0,n.A)(x),[b,R]=D(x),w=e=>{let{__scopeDialog:t,children:r,open:n,defaultOpen:a,onOpenChange:i,modal:d=!0}=e,u=o.useRef(null),c=o.useRef(null),[p=!1,f]=(0,l.i)({prop:n,defaultProp:a,onChange:i});return(0,h.jsx)(b,{scope:t,triggerRef:u,contentRef:c,contentId:(0,s.B)(),titleId:(0,s.B)(),descriptionId:(0,s.B)(),open:p,onOpenChange:f,onOpenToggle:o.useCallback(()=>f(e=>!e),[f]),modal:d,children:r})};w.displayName=x;var N="DialogTrigger",A=o.forwardRef((e,t)=>{let{__scopeDialog:r,...o}=e,n=R(N,r),s=(0,a.s)(t,n.triggerRef);return(0,h.jsx)(f.sG.button,{type:"button","aria-haspopup":"dialog","aria-expanded":n.open,"aria-controls":n.contentId,"data-state":L(n.open),...o,ref:s,onClick:(0,i.m)(e.onClick,n.onOpenToggle)})});A.displayName=N;var C="DialogPortal",[I,O]=D(C,{forceMount:void 0}),F=e=>{let{__scopeDialog:t,forceMount:r,children:n,container:a}=e,i=R(C,t);return(0,h.jsx)(I,{scope:t,forceMount:r,children:o.Children.map(n,e=>(0,h.jsx)(p.C,{present:r||i.open,children:(0,h.jsx)(c.Z,{asChild:!0,container:a,children:e})}))})};F.displayName=C;var E="DialogOverlay",_=o.forwardRef((e,t)=>{let r=O(E,e.__scopeDialog),{forceMount:o=r.forceMount,...n}=e,a=R(E,e.__scopeDialog);return a.modal?(0,h.jsx)(p.C,{present:o||a.open,children:(0,h.jsx)(P,{...n,ref:t})}):null});_.displayName=E;var P=o.forwardRef((e,t)=>{let{__scopeDialog:r,...o}=e,n=R(E,r);return(0,h.jsx)(m.A,{as:y.DX,allowPinchZoom:!0,shards:[n.contentRef],children:(0,h.jsx)(f.sG.div,{"data-state":L(n.open),...o,ref:t,style:{pointerEvents:"auto",...o.style}})})}),$="DialogContent",T=o.forwardRef((e,t)=>{let r=O($,e.__scopeDialog),{forceMount:o=r.forceMount,...n}=e,a=R($,e.__scopeDialog);return(0,h.jsx)(p.C,{present:o||a.open,children:a.modal?(0,h.jsx)(B,{...n,ref:t}):(0,h.jsx)(k,{...n,ref:t})})});T.displayName=$;var B=o.forwardRef((e,t)=>{let r=R($,e.__scopeDialog),n=o.useRef(null),s=(0,a.s)(t,r.contentRef,n);return o.useEffect(()=>{let e=n.current;if(e)return(0,v.Eq)(e)},[]),(0,h.jsx)(q,{...e,ref:s,trapFocus:r.open,disableOutsidePointerEvents:!0,onCloseAutoFocus:(0,i.m)(e.onCloseAutoFocus,e=>{e.preventDefault(),r.triggerRef.current?.focus()}),onPointerDownOutside:(0,i.m)(e.onPointerDownOutside,e=>{let t=e.detail.originalEvent,r=0===t.button&&!0===t.ctrlKey;(2===t.button||r)&&e.preventDefault()}),onFocusOutside:(0,i.m)(e.onFocusOutside,e=>e.preventDefault())})}),k=o.forwardRef((e,t)=>{let r=R($,e.__scopeDialog),n=o.useRef(!1),a=o.useRef(!1);return(0,h.jsx)(q,{...e,ref:t,trapFocus:!1,disableOutsidePointerEvents:!1,onCloseAutoFocus:t=>{e.onCloseAutoFocus?.(t),t.defaultPrevented||(n.current||r.triggerRef.current?.focus(),t.preventDefault()),n.current=!1,a.current=!1},onInteractOutside:t=>{e.onInteractOutside?.(t),t.defaultPrevented||(n.current=!0,"pointerdown"!==t.detail.originalEvent.type||(a.current=!0));let o=t.target;r.triggerRef.current?.contains(o)&&t.preventDefault(),"focusin"===t.detail.originalEvent.type&&a.current&&t.preventDefault()}})}),q=o.forwardRef((e,t)=>{let{__scopeDialog:r,trapFocus:n,onOpenAutoFocus:i,onCloseAutoFocus:s,...l}=e,c=R($,r),p=o.useRef(null),f=(0,a.s)(t,p);return(0,g.Oh)(),(0,h.jsxs)(h.Fragment,{children:[(0,h.jsx)(u.n,{asChild:!0,loop:!0,trapped:n,onMountAutoFocus:i,onUnmountAutoFocus:s,children:(0,h.jsx)(d.qW,{role:"dialog",id:c.contentId,"aria-describedby":c.descriptionId,"aria-labelledby":c.titleId,"data-state":L(c.open),...l,ref:f,onDismiss:()=>c.onOpenChange(!1)})}),(0,h.jsxs)(h.Fragment,{children:[(0,h.jsx)(J,{titleId:c.titleId}),(0,h.jsx)(K,{contentRef:p,descriptionId:c.descriptionId})]})]})}),G="DialogTitle",M=o.forwardRef((e,t)=>{let{__scopeDialog:r,...o}=e,n=R(G,r);return(0,h.jsx)(f.sG.h2,{id:n.titleId,...o,ref:t})});M.displayName=G;var S="DialogDescription",W=o.forwardRef((e,t)=>{let{__scopeDialog:r,...o}=e,n=R(S,r);return(0,h.jsx)(f.sG.p,{id:n.descriptionId,...o,ref:t})});W.displayName=S;var Z="DialogClose",V=o.forwardRef((e,t)=>{let{__scopeDialog:r,...o}=e,n=R(Z,r);return(0,h.jsx)(f.sG.button,{type:"button",...o,ref:t,onClick:(0,i.m)(e.onClick,()=>n.onOpenChange(!1))})});function L(e){return e?"open":"closed"}V.displayName=Z;var U="DialogTitleWarning",[Y,H]=(0,n.q)(U,{contentName:$,titleName:G,docsSlug:"dialog"}),J=({titleId:e})=>{let t=H(U),r=`\`${t.contentName}\` requires a \`${t.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${t.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${t.docsSlug}`;return o.useEffect(()=>{e&&!document.getElementById(e)&&console.error(r)},[r,e]),null},K=({contentRef:e,descriptionId:t})=>{let r=H("DialogDescriptionWarning"),n=`Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${r.contentName}}.`;return o.useEffect(()=>{let r=e.current?.getAttribute("aria-describedby");t&&r&&!document.getElementById(t)&&console.warn(n)},[n,e,t]),null},X="AlertDialog",[z,Q]=(0,n.A)(X,[j]),ee=j(),et=e=>{let{__scopeAlertDialog:t,...r}=e,o=ee(t);return(0,h.jsx)(w,{...o,...r,modal:!0})};et.displayName=X;var er=o.forwardRef((e,t)=>{let{__scopeAlertDialog:r,...o}=e,n=ee(r);return(0,h.jsx)(A,{...n,...o,ref:t})});er.displayName="AlertDialogTrigger";var eo=e=>{let{__scopeAlertDialog:t,...r}=e,o=ee(t);return(0,h.jsx)(F,{...o,...r})};eo.displayName="AlertDialogPortal";var en=o.forwardRef((e,t)=>{let{__scopeAlertDialog:r,...o}=e,n=ee(r);return(0,h.jsx)(_,{...n,...o,ref:t})});en.displayName="AlertDialogOverlay";var ea="AlertDialogContent",[ei,es]=z(ea),el=o.forwardRef((e,t)=>{let{__scopeAlertDialog:r,children:n,...s}=e,l=ee(r),d=o.useRef(null),u=(0,a.s)(t,d),c=o.useRef(null);return(0,h.jsx)(Y,{contentName:ea,titleName:ed,docsSlug:"alert-dialog",children:(0,h.jsx)(ei,{scope:r,cancelRef:c,children:(0,h.jsxs)(T,{role:"alertdialog",...l,...s,ref:u,onOpenAutoFocus:(0,i.m)(s.onOpenAutoFocus,e=>{e.preventDefault(),c.current?.focus({preventScroll:!0})}),onPointerDownOutside:e=>e.preventDefault(),onInteractOutside:e=>e.preventDefault(),children:[(0,h.jsx)(y.xV,{children:n}),(0,h.jsx)(ev,{contentRef:d})]})})})});el.displayName=ea;var ed="AlertDialogTitle",eu=o.forwardRef((e,t)=>{let{__scopeAlertDialog:r,...o}=e,n=ee(r);return(0,h.jsx)(M,{...n,...o,ref:t})});eu.displayName=ed;var ec="AlertDialogDescription",ep=o.forwardRef((e,t)=>{let{__scopeAlertDialog:r,...o}=e,n=ee(r);return(0,h.jsx)(W,{...n,...o,ref:t})});ep.displayName=ec;var ef=o.forwardRef((e,t)=>{let{__scopeAlertDialog:r,...o}=e,n=ee(r);return(0,h.jsx)(V,{...n,...o,ref:t})});ef.displayName="AlertDialogAction";var eg="AlertDialogCancel",em=o.forwardRef((e,t)=>{let{__scopeAlertDialog:r,...o}=e,{cancelRef:n}=es(eg,r),i=ee(r),s=(0,a.s)(t,n);return(0,h.jsx)(V,{...i,...o,ref:s})});em.displayName=eg;var ev=({contentRef:e})=>{let t=`\`${ea}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${ea}\` by passing a \`${ec}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${ea}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;return o.useEffect(()=>{document.getElementById(e.current?.getAttribute("aria-describedby"))||console.warn(t)},[t,e]),null},ey=et,eh=er,ex=eo,eD=en,ej=el,eb=ef,eR=em,ew=eu,eN=ep}};